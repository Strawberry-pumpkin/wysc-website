# Generated by Django 5.0.1 on 2024-05-24 04:38

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.TextField()),
                ('name', models.TextField()),
                ('rated', models.IntegerField(default=True)),
                ('slug', models.TextField(blank=True, unique=True)),
                ('team_size', models.IntegerField(blank=True, null=True)),
                ('entry_mode', models.CharField(choices=[('T', 'By Team'), ('S', 'Individual Tournament'), ('P', 'By Player')], default='T', max_length=1)),
                ('num_rounds', models.IntegerField()),
                ('round_robin', models.BooleanField(blank=True, default=False)),
                ('private', models.BooleanField(blank=True, default=True)),
                ('registration_open', models.BooleanField(blank=True, default=False)),
                ('venue', models.CharField(blank=True, default='To be notified', max_length=100)),
                ('fee', models.IntegerField(blank=True, default=0)),
                ('payment_info', models.TextField(blank=True, default='To be notified')),
            ],
        ),
        migrations.CreateModel(
            name='Participant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('played', models.IntegerField(default=0, null=True)),
                ('game_wins', models.FloatField(default=0, null=True)),
                ('round_wins', models.FloatField(default=0, null=True)),
                ('spread', models.IntegerField(default=0, null=True)),
                ('offed', models.IntegerField(default=0, null=True)),
                ('rating', models.IntegerField(default=0, null=True)),
                ('seed', models.IntegerField()),
                ('white', models.IntegerField(default=0)),
                ('payment', models.FileField(blank=True, null=True, upload_to='')),
                ('passport', models.FileField(blank=True, null=True, upload_to='')),
                ('approved_on', models.DateTimeField(auto_now_add=True, null=True)),
                ('approval', models.CharField(choices=[('V', 'Verified'), ('R', 'Verficiation Failed'), ('P', 'Pending Verification'), ('U', 'Unpaid')], default='U', max_length=1)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='approved_by', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='tournament.tournament')),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('tournament.participant',),
        ),
        migrations.CreateModel(
            name='TeamMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('board', models.IntegerField()),
                ('name', models.CharField(max_length=128)),
                ('wins', models.FloatField()),
                ('spread', models.IntegerField()),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tournament.participant')),
            ],
        ),
        migrations.CreateModel(
            name='Director',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.tournament')),
            ],
        ),
        migrations.CreateModel(
            name='TournamentRound',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('round_no', models.IntegerField()),
                ('spread_cap', models.IntegerField(blank=True, null=True)),
                ('pairing_system', models.CharField(choices=[('ROUND_ROBIN', 'Round Robin'), ('SWISS', 'Swiss'), ('KOTH', 'KOTH'), ('RANDOM', 'Random'), ('MANUAL', 'Manual'), ('AUTO', 'Auto')], max_length=16)),
                ('repeats', models.IntegerField(default=0)),
                ('based_on', models.IntegerField(blank=True, null=True)),
                ('paired', models.BooleanField(default=False)),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rounds', to='tournament.tournament')),
            ],
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('games_won', models.FloatField(blank=True, null=True)),
                ('score1', models.IntegerField(blank=True, null=True)),
                ('score2', models.IntegerField(blank=True, null=True)),
                ('table', models.IntegerField(default=0)),
                ('p1', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='p1', to='tournament.participant')),
                ('p2', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='p2', to='tournament.participant')),
                ('starting', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='starting', to='tournament.participant')),
                ('round', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='results', to='tournament.tournamentround')),
            ],
        ),
        migrations.CreateModel(
            name='BoardResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('board', models.IntegerField()),
                ('score1', models.IntegerField(blank=True, null=True)),
                ('score2', models.IntegerField(blank=True, null=True)),
                ('team1', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='team1', to='tournament.participant')),
                ('team2', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='team2', to='tournament.participant')),
                ('round', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tournament.tournamentround')),
            ],
        ),
        migrations.AddConstraint(
            model_name='participant',
            constraint=models.CheckConstraint(check=models.Q(('game_wins__gte', 0)), name='wins_check'),
        ),
        migrations.AddConstraint(
            model_name='participant',
            constraint=models.CheckConstraint(check=models.Q(('round_wins__gte', 0)), name='round_win_check'),
        ),
        migrations.AlterUniqueTogether(
            name='participant',
            unique_together={('name', 'tournament')},
        ),
        migrations.AddConstraint(
            model_name='tournamentround',
            constraint=models.CheckConstraint(check=models.Q(('based_on__lt', models.F('round_no'))), name='based_on_check'),
        ),
        migrations.AddConstraint(
            model_name='tournamentround',
            constraint=models.CheckConstraint(check=models.Q(('round_no__gt', 0)), name='round_no_check'),
        ),
        migrations.AddConstraint(
            model_name='result',
            constraint=models.CheckConstraint(check=models.Q(('p1_id__lt', models.F('p2_id'))), name='p1p2_check'),
        ),
        migrations.AlterUniqueTogether(
            name='result',
            unique_together={('round', 'p1', 'p2')},
        ),
        migrations.AddConstraint(
            model_name='boardresult',
            constraint=models.CheckConstraint(check=models.Q(('team1_id__lt', models.F('team2_id'))), name='t1t2_check'),
        ),
        migrations.AlterUniqueTogether(
            name='boardresult',
            unique_together={('round', 'team1', 'team2', 'board')},
        ),
    ]
